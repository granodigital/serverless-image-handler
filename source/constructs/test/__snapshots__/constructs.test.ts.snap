// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Serverless Image Handler Stack Snapshot 1`] = `
{
  "Conditions": {
    "BackEndShortLogRetentionCondition72EA1A33": {
      "Fn::Or": [
        {
          "Fn::Equals": [
            {
              "Ref": "LogRetentionPeriodParameter",
            },
            "1",
          ],
        },
        {
          "Fn::Equals": [
            {
              "Ref": "LogRetentionPeriodParameter",
            },
            "3",
          ],
        },
        {
          "Fn::Equals": [
            {
              "Ref": "LogRetentionPeriodParameter",
            },
            "5",
          ],
        },
      ],
    },
    "CommonResourcesDeployDemoUICondition308D3B09": {
      "Fn::Equals": [
        {
          "Ref": "DeployDemoUIParameter",
        },
        "Yes",
      ],
    },
    "CommonResourcesEnableCorsConditionA0615348": {
      "Fn::Equals": [
        {
          "Ref": "CorsEnabledParameter",
        },
        "Yes",
      ],
    },
    "CommonResourcesEnableDefaultFallbackImageConditionD1A10983": {
      "Fn::Equals": [
        {
          "Ref": "EnableDefaultFallbackImageParameter",
        },
        "Yes",
      ],
    },
    "CommonResourcesEnableSignatureCondition909DC7A1": {
      "Fn::Equals": [
        {
          "Ref": "EnableSignatureParameter",
        },
        "Yes",
      ],
    },
    "SendAnonymousStatistics": {
      "Fn::Equals": [
        {
          "Fn::FindInMap": [
            "Solution",
            "Config",
            "AnonymousUsage",
          ],
        },
        "Yes",
      ],
    },
  },
  "Mappings": {
    "Solution": {
      "Config": {
        "AnonymousUsage": "Yes",
        "SolutionId": "S0ABC",
        "Version": "v6.3.1",
      },
    },
  },
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "CORS Options",
          },
          "Parameters": [
            "CorsEnabledParameter",
            "CorsOriginParameter",
          ],
        },
        {
          "Label": {
            "default": "Image Sources",
          },
          "Parameters": [
            "SourceBucketsParameter",
          ],
        },
        {
          "Label": {
            "default": "Demo UI",
          },
          "Parameters": [
            "DeployDemoUIParameter",
          ],
        },
        {
          "Label": {
            "default": "Event Logging",
          },
          "Parameters": [
            "LogRetentionPeriodParameter",
          ],
        },
        {
          "Label": {
            "default": "Image URL Signature (Note: Enabling signature is not compatible with previous image URLs, which could result in broken image links. Please refer to the implementation guide for details: https://docs.aws.amazon.com/solutions/latest/serverless-image-handler/considerations.html)",
          },
          "Parameters": [
            "EnableSignatureParameter",
            "SecretsManagerSecretParameter",
            "SecretsManagerKeyParameter",
          ],
        },
        {
          "Label": {
            "default": "Default Fallback Image (Note: Enabling default fallback image returns the default fallback image instead of JSON object when error happens. Please refer to the implementation guide for details: https://docs.aws.amazon.com/solutions/latest/serverless-image-handler/considerations.html)",
          },
          "Parameters": [
            "EnableDefaultFallbackImageParameter",
            "FallbackImageS3BucketParameter",
            "FallbackImageS3KeyParameter",
          ],
        },
        {
          "Label": {
            "default": "Auto WebP",
          },
          "Parameters": [
            "AutoWebPParameter",
          ],
        },
      ],
      "ParameterLabels": {
        "AutoWebPParameter": {
          "default": "AutoWebP",
        },
        "CloudFrontPriceClassParameter": {
          "default": "CloudFront PriceClass",
        },
        "CorsEnabledParameter": {
          "default": "CORS Enabled",
        },
        "CorsOriginParameter": {
          "default": "CORS Origin",
        },
        "DeployDemoUIParameter": {
          "default": "Deploy Demo UI",
        },
        "EnableDefaultFallbackImageParameter": {
          "default": "Enable Default Fallback Image",
        },
        "EnableSignatureParameter": {
          "default": "Enable Signature",
        },
        "FallbackImageS3BucketParameter": {
          "default": "Fallback Image S3 Bucket",
        },
        "FallbackImageS3KeyParameter": {
          "default": "Fallback Image S3 Key",
        },
        "LogRetentionPeriodParameter": {
          "default": "Log Retention Period",
        },
        "SecretsManagerKeyParameter": {
          "default": "SecretsManager Key",
        },
        "SecretsManagerSecretParameter": {
          "default": "SecretsManager Secret",
        },
        "SourceBucketsParameter": {
          "default": "Source Buckets",
        },
      },
    },
  },
  "Outputs": {
    "ApiEndpoint": {
      "Description": "Link to API endpoint for sending image requests to.",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Fn::GetAtt": [
                "BackEndImageHandlerCloudFrontApiGatewayLambdaCloudFrontToApiGatewayCloudFrontDistribution03AA31B2",
                "DomainName",
              ],
            },
          ],
        ],
      },
    },
    "CloudFrontLoggingBucket": {
      "Description": "Amazon S3 bucket for storing CloudFront access logs.",
      "Value": {
        "Fn::GetAtt": [
          "CommonResourcesCustomResourcesLogBucketCustomResource2445A3AB",
          "BucketName",
        ],
      },
    },
    "CorsEnabled": {
      "Description": "Indicates whether Cross-Origin Resource Sharing (CORS) has been enabled for the image handler API.",
      "Value": {
        "Ref": "CorsEnabledParameter",
      },
    },
    "CorsOrigin": {
      "Condition": "CommonResourcesEnableCorsConditionA0615348",
      "Description": "Origin value returned in the Access-Control-Allow-Origin header of image handler API responses.",
      "Value": {
        "Ref": "CorsOriginParameter",
      },
    },
    "DemoUrl": {
      "Condition": "CommonResourcesDeployDemoUICondition308D3B09",
      "Description": "Link to the demo user interface for the solution.",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Fn::GetAtt": [
                "FrontEndDistributionToS3CloudFrontDistribution15FE13D0",
                "DomainName",
              ],
            },
            "/index.html",
          ],
        ],
      },
    },
    "LogRetentionPeriod": {
      "Description": "Number of days for event logs from Lambda to be retained in CloudWatch.",
      "Value": {
        "Ref": "LogRetentionPeriodParameter",
      },
    },
    "SourceBuckets": {
      "Description": "Amazon S3 bucket location containing original image files.",
      "Value": {
        "Ref": "SourceBucketsParameter",
      },
    },
  },
  "Parameters": {
    "AutoWebPParameter": {
      "AllowedValues": [
        "Yes",
        "No",
      ],
      "Default": "No",
      "Description": "Would you like to enable automatic WebP based on accept headers? Select 'Yes' if so.",
      "Type": "String",
    },
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "CloudFrontPriceClassParameter": {
      "AllowedValues": [
        "PriceClass_All",
        "PriceClass_200",
        "PriceClass_100",
      ],
      "Default": "PriceClass_All",
      "Description": "The AWS CloudFront price class to use. For more information see: https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PriceClass.html",
      "Type": "String",
    },
    "CorsEnabledParameter": {
      "AllowedValues": [
        "Yes",
        "No",
      ],
      "Default": "No",
      "Description": "Would you like to enable Cross-Origin Resource Sharing (CORS) for the image handler API? Select 'Yes' if so.",
      "Type": "String",
    },
    "CorsOriginParameter": {
      "Default": "*",
      "Description": "If you selected 'Yes' above, please specify an origin value here. A wildcard (*) value will support any origin. We recommend specifying an origin (i.e. https://example.domain) to restrict cross-site access to your API.",
      "Type": "String",
    },
    "DeployDemoUIParameter": {
      "AllowedValues": [
        "Yes",
        "No",
      ],
      "Default": "Yes",
      "Description": "Would you like to deploy a demo UI to explore the features and capabilities of this solution? This will create an additional Amazon S3 bucket and Amazon CloudFront distribution in your account.",
      "Type": "String",
    },
    "EnableDefaultFallbackImageParameter": {
      "AllowedValues": [
        "Yes",
        "No",
      ],
      "Default": "No",
      "Description": "Would you like to enable the default fallback image? If so, select 'Yes' and provide FallbackImageS3Bucket and FallbackImageS3Key values.",
      "Type": "String",
    },
    "EnableSignatureParameter": {
      "AllowedValues": [
        "Yes",
        "No",
      ],
      "Default": "No",
      "Description": "Would you like to enable the signature? If so, select 'Yes' and provide SecretsManagerSecret and SecretsManagerKey values.",
      "Type": "String",
    },
    "FallbackImageS3BucketParameter": {
      "Default": "",
      "Description": "The name of the Amazon S3 bucket which contains the default fallback image. e.g. my-fallback-image-bucket",
      "Type": "String",
    },
    "FallbackImageS3KeyParameter": {
      "Default": "",
      "Description": "The name of the default fallback image object key including prefix. e.g. prefix/image.jpg",
      "Type": "String",
    },
    "LogRetentionPeriodParameter": {
      "AllowedValues": [
        "1",
        "3",
        "5",
        "7",
        "14",
        "30",
        "60",
        "90",
        "120",
        "150",
        "180",
        "365",
        "400",
        "545",
        "731",
        "1827",
        "3653",
      ],
      "Default": "180",
      "Description": "This solution automatically logs events to Amazon CloudWatch. Select the amount of time for CloudWatch logs from this solution to be retained (in days).",
      "Type": "Number",
    },
    "SecretsManagerKeyParameter": {
      "Default": "",
      "Description": "The name of AWS Secrets Manager secret key. You need to create secret key with this key name. The secret value would be used to check signature.",
      "Type": "String",
    },
    "SecretsManagerSecretParameter": {
      "Default": "",
      "Description": "The name of AWS Secrets Manager secret. You need to create your secret under this name.",
      "Type": "String",
    },
    "SourceBucketsParameter": {
      "AllowedPattern": ".+",
      "Default": "defaultBucket, bucketNo2, bucketNo3, ...",
      "Description": "(Required) List the buckets (comma-separated) within your account that contain original image files. If you plan to use Thumbor or Custom image requests with this solution, the source bucket for those requests will default to the first bucket listed in this field.",
      "Type": "String",
    },
  },
  "Resources": {
    "AppRegistry968496A3": {
      "Properties": {
        "Description": "Service Catalog application to track and manage all your resources for the solution sih",
        "Name": {
          "Fn::Join": [
            "-",
            [
              "AppRegistry",
              {
                "Ref": "AWS::StackName",
              },
              {
                "Ref": "AWS::Region",
              },
              {
                "Ref": "AWS::AccountId",
              },
            ],
          ],
        },
        "Tags": {
          "SolutionId": "S0ABC",
          "Solutions:ApplicationType": "AWS-Solutions",
          "Solutions:SolutionID": "S0ABC",
          "Solutions:SolutionName": "sih",
          "Solutions:SolutionVersion": "v6.3.1",
        },
      },
      "Type": "AWS::ServiceCatalogAppRegistry::Application",
    },
    "AppRegistryAssociation": {
      "Properties": {
        "Application": {
          "Fn::GetAtt": [
            "AppRegistry968496A3",
            "Id",
          ],
        },
        "Resource": {
          "Ref": "AWS::StackId",
        },
        "ResourceType": "CFN_STACK",
      },
      "Type": "AWS::ServiceCatalogAppRegistry::ResourceAssociation",
    },
    "BackEndCachePolicy1DCE9B1B": {
      "Properties": {
        "CachePolicyConfig": {
          "DefaultTTL": 86400,
          "MaxTTL": 31536000,
          "MinTTL": 1,
          "Name": {
            "Fn::Join": [
              "",
              [
                "ServerlessImageHandler-",
                {
                  "Fn::GetAtt": [
                    "CommonResourcesCustomResourcesCustomResourceUuid64E7CCAD",
                    "UUID",
                  ],
                },
              ],
            ],
          },
          "ParametersInCacheKeyAndForwardedToOrigin": {
            "CookiesConfig": {
              "CookieBehavior": "none",
            },
            "EnableAcceptEncodingBrotli": false,
            "EnableAcceptEncodingGzip": false,
            "HeadersConfig": {
              "HeaderBehavior": "whitelist",
              "Headers": [
                "origin",
                "accept",
              ],
            },
            "QueryStringsConfig": {
              "QueryStringBehavior": "whitelist",
              "QueryStrings": [
                "signature",
              ],
            },
          },
        },
      },
      "Type": "AWS::CloudFront::CachePolicy",
    },
    "BackEndImageHandlerCloudFrontApiGatewayLambdaApiAccessLogGroup9B786692": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W84",
              "reason": "By default CloudWatchLogs LogGroups data is encrypted using the CloudWatch server-side encryption keys (AWS Managed Keys)",
            },
          ],
        },
      },
      "Properties": {
        "RetentionInDays": {
          "Ref": "LogRetentionPeriodParameter",
        },
        "Tags": [
          {
            "Key": "SolutionId",
            "Value": "S0ABC",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "BackEndImageHandlerCloudFrontApiGatewayLambdaCloudFrontToApiGatewayCloudFrontDistribution03AA31B2": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W70",
              "reason": "Since the distribution uses the CloudFront domain name, CloudFront automatically sets the security policy to TLSv1 regardless of the value of MinimumProtocolVersion",
            },
          ],
        },
      },
      "Properties": {
        "DistributionConfig": {
          "Comment": "Image Handler Distribution for Serverless Image Handler",
          "CustomErrorResponses": [
            {
              "ErrorCachingMinTTL": 600,
              "ErrorCode": 500,
            },
            {
              "ErrorCachingMinTTL": 600,
              "ErrorCode": 501,
            },
            {
              "ErrorCachingMinTTL": 600,
              "ErrorCode": 502,
            },
            {
              "ErrorCachingMinTTL": 600,
              "ErrorCode": 503,
            },
            {
              "ErrorCachingMinTTL": 600,
              "ErrorCode": 504,
            },
          ],
          "DefaultCacheBehavior": {
            "AllowedMethods": [
              "GET",
              "HEAD",
            ],
            "CachePolicyId": {
              "Ref": "BackEndCachePolicy1DCE9B1B",
            },
            "Compress": true,
            "OriginRequestPolicyId": {
              "Ref": "BackEndOriginRequestPolicy771345D7",
            },
            "TargetOriginId": "TestStackBackEndImageHandlerCloudFrontApiGatewayLambdaCloudFrontToApiGatewayCloudFrontDistributionOrigin1A053AEB7",
            "ViewerProtocolPolicy": "https-only",
          },
          "Enabled": true,
          "HttpVersion": "http2",
          "IPV6Enabled": true,
          "Logging": {
            "Bucket": {
              "Fn::Join": [
                "",
                [
                  {
                    "Fn::GetAtt": [
                      "CommonResourcesCustomResourcesLogBucketCustomResource2445A3AB",
                      "BucketName",
                    ],
                  },
                  ".s3.",
                  {
                    "Fn::GetAtt": [
                      "CommonResourcesCustomResourcesLogBucketCustomResource2445A3AB",
                      "Region",
                    ],
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix",
                  },
                ],
              ],
            },
            "Prefix": "api-cloudfront/",
          },
          "Origins": [
            {
              "CustomOriginConfig": {
                "OriginProtocolPolicy": "https-only",
                "OriginSSLProtocols": [
                  "TLSv1.1",
                  "TLSv1.2",
                ],
              },
              "DomainName": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Ref": "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApi5A77D109",
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region",
                    },
                    ".amazonaws.com",
                  ],
                ],
              },
              "Id": "TestStackBackEndImageHandlerCloudFrontApiGatewayLambdaCloudFrontToApiGatewayCloudFrontDistributionOrigin1A053AEB7",
              "OriginPath": "/image",
            },
          ],
          "PriceClass": {
            "Ref": "CloudFrontPriceClassParameter",
          },
        },
        "Tags": [
          {
            "Key": "SolutionId",
            "Value": "S0ABC",
          },
        ],
      },
      "Type": "AWS::CloudFront::Distribution",
    },
    "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApi5A77D109": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W59",
              "reason": "AWS::ApiGateway::Method AuthorizationType is set to 'NONE' because API Gateway behind CloudFront does not support AWS_IAM authentication",
            },
          ],
        },
      },
      "Properties": {
        "BinaryMediaTypes": [
          "*/*",
        ],
        "EndpointConfiguration": {
          "Types": [
            "REGIONAL",
          ],
        },
        "Name": "LambdaRestApi",
        "Tags": [
          {
            "Key": "SolutionId",
            "Value": "S0ABC",
          },
        ],
      },
      "Type": "AWS::ApiGateway::RestApi",
    },
    "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApiANYApiPermissionTestStackBackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApi9D692DD2ANY979F1429": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "BackEndImageHandlerLambdaFunctionADEF7FF2",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApi5A77D109",
              },
              "/",
              {
                "Ref": "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApiDeploymentStageimageB55D20E3",
              },
              "/*/",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApiANYApiPermissionTestTestStackBackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApi9D692DD2ANY932D3700": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "BackEndImageHandlerLambdaFunctionADEF7FF2",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApi5A77D109",
              },
              "/test-invoke-stage/*/",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApiANYE4494B31": {
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "ANY",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "BackEndImageHandlerLambdaFunctionADEF7FF2",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "ResourceId": {
          "Fn::GetAtt": [
            "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApi5A77D109",
            "RootResourceId",
          ],
        },
        "RestApiId": {
          "Ref": "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApi5A77D109",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApiAccountE5522E5D": {
      "DependsOn": [
        "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApi5A77D109",
      ],
      "Properties": {
        "CloudWatchRoleArn": {
          "Fn::GetAtt": [
            "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApiCloudWatchRole12575C4D",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ApiGateway::Account",
    },
    "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApiCloudWatchRole12575C4D": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:DescribeLogGroups",
                    "logs:DescribeLogStreams",
                    "logs:PutLogEvents",
                    "logs:GetLogEvents",
                    "logs:FilterLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaRestApiCloudWatchRolePolicy",
          },
        ],
        "Tags": [
          {
            "Key": "SolutionId",
            "Value": "S0ABC",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApiDeployment663240D6bb2931f4d7f47b51b7b40b3fd0d7001b": {
      "DependsOn": [
        "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApiproxyANY8F9763E1",
        "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApiproxyBDF0A131",
        "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApiANYE4494B31",
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W45",
              "reason": "ApiGateway has AccessLogging enabled in AWS::ApiGateway::Stage resource, but cfn_nag checks for it in AWS::ApiGateway::Deployment resource",
            },
          ],
        },
      },
      "Properties": {
        "Description": "Automatically created by the RestApi construct",
        "RestApiId": {
          "Ref": "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApi5A77D109",
        },
      },
      "Type": "AWS::ApiGateway::Deployment",
    },
    "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApiDeploymentStageimageB55D20E3": {
      "Properties": {
        "AccessLogSetting": {
          "DestinationArn": {
            "Fn::GetAtt": [
              "BackEndImageHandlerCloudFrontApiGatewayLambdaApiAccessLogGroup9B786692",
              "Arn",
            ],
          },
          "Format": "{"requestId":"$context.requestId","ip":"$context.identity.sourceIp","user":"$context.identity.user","caller":"$context.identity.caller","requestTime":"$context.requestTime","httpMethod":"$context.httpMethod","resourcePath":"$context.resourcePath","status":"$context.status","protocol":"$context.protocol","responseLength":"$context.responseLength"}",
        },
        "DeploymentId": {
          "Ref": "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApiDeployment663240D6bb2931f4d7f47b51b7b40b3fd0d7001b",
        },
        "MethodSettings": [
          {
            "DataTraceEnabled": false,
            "HttpMethod": "*",
            "LoggingLevel": "INFO",
            "ResourcePath": "/*",
          },
        ],
        "RestApiId": {
          "Ref": "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApi5A77D109",
        },
        "StageName": "image",
        "Tags": [
          {
            "Key": "SolutionId",
            "Value": "S0ABC",
          },
        ],
        "TracingEnabled": true,
      },
      "Type": "AWS::ApiGateway::Stage",
    },
    "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApiUsagePlan76CA1E70": {
      "Properties": {
        "ApiStages": [
          {
            "ApiId": {
              "Ref": "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApi5A77D109",
            },
            "Stage": {
              "Ref": "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApiDeploymentStageimageB55D20E3",
            },
            "Throttle": {},
          },
        ],
        "Tags": [
          {
            "Key": "SolutionId",
            "Value": "S0ABC",
          },
        ],
      },
      "Type": "AWS::ApiGateway::UsagePlan",
    },
    "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApiproxyANY8F9763E1": {
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "ANY",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "BackEndImageHandlerLambdaFunctionADEF7FF2",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "ResourceId": {
          "Ref": "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApiproxyBDF0A131",
        },
        "RestApiId": {
          "Ref": "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApi5A77D109",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApiproxyANYApiPermissionTestStackBackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApi9D692DD2ANYproxyB5CBD1F7": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "BackEndImageHandlerLambdaFunctionADEF7FF2",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApi5A77D109",
              },
              "/",
              {
                "Ref": "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApiDeploymentStageimageB55D20E3",
              },
              "/*/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApiproxyANYApiPermissionTestTestStackBackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApi9D692DD2ANYproxyAEADD71A": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "BackEndImageHandlerLambdaFunctionADEF7FF2",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApi5A77D109",
              },
              "/test-invoke-stage/*/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApiproxyBDF0A131": {
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApi5A77D109",
            "RootResourceId",
          ],
        },
        "PathPart": "{proxy+}",
        "RestApiId": {
          "Ref": "BackEndImageHandlerCloudFrontApiGatewayLambdaLambdaRestApi5A77D109",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "BackEndImageHandlerFunctionPolicy437940B5": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "rekognition:DetectFaces requires '*' resources.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":logs:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":log-group:/aws/lambda/*",
                  ],
                ],
              },
            },
            {
              "Action": "s3:GetObject",
              "Effect": "Allow",
              "Resource": {
                "Fn::Split": [
                  ",",
                  {
                    "Fn::Sub": [
                      "arn:aws:s3:::\${rest}/*",
                      {
                        "rest": {
                          "Fn::Join": [
                            "/*,arn:aws:s3:::",
                            {
                              "Fn::Split": [
                                ",",
                                {
                                  "Fn::Join": [
                                    "",
                                    {
                                      "Fn::Split": [
                                        " ",
                                        {
                                          "Ref": "SourceBucketsParameter",
                                        },
                                      ],
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      },
                    ],
                  },
                ],
              },
            },
            {
              "Action": "s3:ListBucket",
              "Effect": "Allow",
              "Resource": {
                "Fn::Split": [
                  ",",
                  {
                    "Fn::Sub": [
                      "arn:aws:s3:::\${rest}",
                      {
                        "rest": {
                          "Fn::Join": [
                            ",arn:aws:s3:::",
                            {
                              "Fn::Split": [
                                ",",
                                {
                                  "Fn::Join": [
                                    "",
                                    {
                                      "Fn::Split": [
                                        " ",
                                        {
                                          "Ref": "SourceBucketsParameter",
                                        },
                                      ],
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      },
                    ],
                  },
                ],
              },
            },
            {
              "Action": "s3:GetObject",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "FallbackImageS3BucketParameter",
                    },
                    "/",
                    {
                      "Ref": "FallbackImageS3KeyParameter",
                    },
                  ],
                ],
              },
            },
            {
              "Action": [
                "rekognition:DetectFaces",
                "rekognition:DetectModerationLabels",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "BackEndImageHandlerFunctionPolicy437940B5",
        "Roles": [
          {
            "Ref": "BackEndImageHandlerFunctionRoleABF81E5C",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "BackEndImageHandlerFunctionRoleABF81E5C": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Path": "/",
        "Tags": [
          {
            "Key": "SolutionId",
            "Value": "S0ABC",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "BackEndImageHandlerLambdaFunctionADEF7FF2": {
      "DependsOn": [
        "BackEndImageHandlerFunctionRoleABF81E5C",
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W58",
              "reason": "The function does have permission to write CloudWatch Logs.",
            },
            {
              "id": "W89",
              "reason": "The Lambda function does not require any VPC connection at all.",
            },
            {
              "id": "W92",
              "reason": "The Lambda function does not require ReservedConcurrentExecutions.",
            },
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "Omitted to remove snapshot dependency on hash",
        },
        "Description": "sih (v6.3.1): Performs image edits and manipulations",
        "Environment": {
          "Variables": {
            "AUTO_WEBP": {
              "Ref": "AutoWebPParameter",
            },
            "CORS_ENABLED": {
              "Ref": "CorsEnabledParameter",
            },
            "CORS_ORIGIN": {
              "Ref": "CorsOriginParameter",
            },
            "DEFAULT_FALLBACK_IMAGE_BUCKET": {
              "Ref": "FallbackImageS3BucketParameter",
            },
            "DEFAULT_FALLBACK_IMAGE_KEY": {
              "Ref": "FallbackImageS3KeyParameter",
            },
            "ENABLE_DEFAULT_FALLBACK_IMAGE": {
              "Ref": "EnableDefaultFallbackImageParameter",
            },
            "ENABLE_SIGNATURE": {
              "Ref": "EnableSignatureParameter",
            },
            "REWRITE_MATCH_PATTERN": "",
            "REWRITE_SUBSTITUTION": "",
            "SECRETS_MANAGER": {
              "Ref": "SecretsManagerSecretParameter",
            },
            "SECRET_KEY": {
              "Ref": "SecretsManagerKeyParameter",
            },
            "SOLUTION_ID": "S0ABC",
            "SOLUTION_VERSION": "Omitted to remove snapshot dependency on solution version",
            "SOURCE_BUCKETS": {
              "Ref": "SourceBucketsParameter",
            },
          },
        },
        "Handler": "index.handler",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "BackEndImageHandlerFunctionRoleABF81E5C",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
        "Tags": [
          {
            "Key": "SolutionId",
            "Value": "S0ABC",
          },
        ],
        "Timeout": 29,
      },
      "Type": "AWS::Lambda::Function",
    },
    "BackEndImageHandlerLogGroupA0941EEC": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W84",
              "reason": "CloudWatch log group is always encrypted by default.",
            },
          ],
        },
      },
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "",
            [
              "/aws/lambda/",
              {
                "Ref": "BackEndImageHandlerLambdaFunctionADEF7FF2",
              },
            ],
          ],
        },
        "RetentionInDays": {
          "Ref": "LogRetentionPeriodParameter",
        },
        "Tags": [
          {
            "Key": "SolutionId",
            "Value": "S0ABC",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "BackEndOriginRequestPolicy771345D7": {
      "Properties": {
        "OriginRequestPolicyConfig": {
          "CookiesConfig": {
            "CookieBehavior": "none",
          },
          "HeadersConfig": {
            "HeaderBehavior": "whitelist",
            "Headers": [
              "origin",
              "accept",
            ],
          },
          "Name": {
            "Fn::Join": [
              "",
              [
                "ServerlessImageHandler-",
                {
                  "Fn::GetAtt": [
                    "CommonResourcesCustomResourcesCustomResourceUuid64E7CCAD",
                    "UUID",
                  ],
                },
              ],
            ],
          },
          "QueryStringsConfig": {
            "QueryStringBehavior": "whitelist",
            "QueryStrings": [
              "signature",
            ],
          },
        },
      },
      "Type": "AWS::CloudFront::OriginRequestPolicy",
    },
    "BackEndSolutionMetricsBilledDurationMemorySizeQuery39F16D58": {
      "Condition": "SendAnonymousStatistics",
      "Properties": {
        "LogGroupNames": [
          {
            "Ref": "BackEndImageHandlerLogGroupA0941EEC",
          },
        ],
        "Name": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName",
              },
              "-BilledDurationMemorySizeQuery",
            ],
          ],
        },
        "QueryString": "stats sum(@billedDuration) as AWSLambdaBilledDuration, max(@memorySize) as AWSLambdaMemorySize",
      },
      "Type": "AWS::Logs::QueryDefinition",
    },
    "BackEndSolutionMetricsEventbridgeRuleToLambdaEventsRule05009025": {
      "Condition": "SendAnonymousStatistics",
      "Properties": {
        "ScheduleExpression": {
          "Fn::Join": [
            "",
            [
              "cron(0 23 ? * ",
              {
                "Fn::If": [
                  "BackEndShortLogRetentionCondition72EA1A33",
                  "*",
                  "MON",
                ],
              },
              " *)",
            ],
          ],
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "BackEndSolutionMetricsMetricsLambdaF4FA4AF7",
                "Arn",
              ],
            },
            "Id": "Target0",
            "InputTransformer": {
              "InputPathsMap": {
                "detail-type": "$.detail-type",
                "time": "$.time",
              },
              "InputTemplate": {
                "Fn::Join": [
                  "",
                  [
                    "{"detail-type": <detail-type>, "time": <time>, "metrics-data-query": [{"MetricStat":{"Metric":{"Namespace":"AWS/Lambda","Dimensions":[{"Name":"FunctionName","Value":"",
                    {
                      "Ref": "BackEndImageHandlerLambdaFunctionADEF7FF2",
                    },
                    ""}],"MetricName":"Invocations"},"Stat":"Sum","Period":604800},"Id":"id_",
                    {
                      "Fn::Join": [
                        "_",
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Ref": "AWS::StackName",
                            },
                          ],
                        },
                      ],
                    },
                    "_0"},{"MetricStat":{"Metric":{"Namespace":"AWS/CloudFront","Dimensions":[{"Name":"DistributionId","Value":"",
                    {
                      "Ref": "BackEndImageHandlerCloudFrontApiGatewayLambdaCloudFrontToApiGatewayCloudFrontDistribution03AA31B2",
                    },
                    ""},{"Name":"Region","Value":"Global"}],"MetricName":"Requests"},"Stat":"Sum","Period":604800},"region":"us-east-1","Id":"id_",
                    {
                      "Fn::Join": [
                        "_",
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Ref": "AWS::StackName",
                            },
                          ],
                        },
                      ],
                    },
                    "_1"},{"MetricStat":{"Metric":{"Namespace":"AWS/CloudFront","Dimensions":[{"Name":"DistributionId","Value":"",
                    {
                      "Ref": "BackEndImageHandlerCloudFrontApiGatewayLambdaCloudFrontToApiGatewayCloudFrontDistribution03AA31B2",
                    },
                    ""},{"Name":"Region","Value":"Global"}],"MetricName":"BytesDownloaded"},"Stat":"Sum","Period":604800},"region":"us-east-1","Id":"id_",
                    {
                      "Fn::Join": [
                        "_",
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Ref": "AWS::StackName",
                            },
                          ],
                        },
                      ],
                    },
                    "_2"}]}",
                  ],
                ],
              },
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "BackEndSolutionMetricsLambdaToSqsToLambdalambdatosqsqueue60A92083": {
      "Condition": "SendAnonymousStatistics",
      "DeletionPolicy": "Delete",
      "Properties": {
        "DelaySeconds": 900,
        "KmsMasterKeyId": "alias/aws/sqs",
        "MaximumMessageSize": 1024,
        "MessageRetentionPeriod": 86400,
        "ReceiveMessageWaitTimeSeconds": 20,
        "Tags": [
          {
            "Key": "SolutionId",
            "Value": "S0ABC",
          },
        ],
        "VisibilityTimeout": 1020,
      },
      "Type": "AWS::SQS::Queue",
      "UpdateReplacePolicy": "Delete",
    },
    "BackEndSolutionMetricsLambdaToSqsToLambdalambdatosqsqueuePolicy5B9B4D7F": {
      "Condition": "SendAnonymousStatistics",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sqs:DeleteMessage",
                "sqs:ReceiveMessage",
                "sqs:SendMessage",
                "sqs:GetQueueAttributes",
                "sqs:RemovePermission",
                "sqs:AddPermission",
                "sqs:SetQueueAttributes",
              ],
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":root",
                    ],
                  ],
                },
              },
              "Resource": {
                "Fn::GetAtt": [
                  "BackEndSolutionMetricsLambdaToSqsToLambdalambdatosqsqueue60A92083",
                  "Arn",
                ],
              },
              "Sid": "QueueOwnerOnlyAccess",
            },
            {
              "Action": "SQS:*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": {
                "AWS": "*",
              },
              "Resource": {
                "Fn::GetAtt": [
                  "BackEndSolutionMetricsLambdaToSqsToLambdalambdatosqsqueue60A92083",
                  "Arn",
                ],
              },
              "Sid": "HttpsOnly",
            },
          ],
          "Version": "2012-10-17",
        },
        "Queues": [
          {
            "Ref": "BackEndSolutionMetricsLambdaToSqsToLambdalambdatosqsqueue60A92083",
          },
        ],
      },
      "Type": "AWS::SQS::QueuePolicy",
    },
    "BackEndSolutionMetricsMetricsLambdaAwsEventsLambdaInvokePermission1328BC090": {
      "Condition": "SendAnonymousStatistics",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "BackEndSolutionMetricsMetricsLambdaF4FA4AF7",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "BackEndSolutionMetricsEventbridgeRuleToLambdaEventsRule05009025",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "BackEndSolutionMetricsMetricsLambdaF4FA4AF7": {
      "Condition": "SendAnonymousStatistics",
      "DependsOn": [
        "BackEndSolutionMetricsMetricsLambdaServiceRoleDefaultPolicyEBDDA47A",
        "BackEndSolutionMetricsMetricsLambdaServiceRoleF4BC77CD",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "Omitted to remove snapshot dependency on hash",
        },
        "Environment": {
          "Variables": {
            "EXECUTION_DAY": {
              "Fn::If": [
                "BackEndShortLogRetentionCondition72EA1A33",
                "*",
                "MON",
              ],
            },
            "QUERY_PREFIX": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName",
                  },
                  "-",
                ],
              ],
            },
            "SOLUTION_ID": "SO0023",
            "SOLUTION_NAME": "serverless-image-handler",
            "SOLUTION_VERSION": "Omitted to remove snapshot dependency on solution version",
            "SQS_QUEUE_URL": {
              "Ref": "BackEndSolutionMetricsLambdaToSqsToLambdalambdatosqsqueue60A92083",
            },
            "UUID": {
              "Fn::GetAtt": [
                "CommonResourcesCustomResourcesCustomResourceUuid64E7CCAD",
                "UUID",
              ],
            },
          },
        },
        "Handler": "index.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "BackEndSolutionMetricsMetricsLambdaServiceRoleF4BC77CD",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Tags": [
          {
            "Key": "SolutionId",
            "Value": "S0ABC",
          },
        ],
        "Timeout": 60,
      },
      "Type": "AWS::Lambda::Function",
    },
    "BackEndSolutionMetricsMetricsLambdaServiceRoleDefaultPolicyEBDDA47A": {
      "Condition": "SendAnonymousStatistics",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sqs:SendMessage",
                "sqs:GetQueueAttributes",
                "sqs:GetQueueUrl",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "BackEndSolutionMetricsLambdaToSqsToLambdalambdatosqsqueue60A92083",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "sqs:ReceiveMessage",
                "sqs:ChangeMessageVisibility",
                "sqs:GetQueueUrl",
                "sqs:DeleteMessage",
                "sqs:GetQueueAttributes",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "BackEndSolutionMetricsLambdaToSqsToLambdalambdatosqsqueue60A92083",
                  "Arn",
                ],
              },
            },
            {
              "Action": "cloudwatch:GetMetricData",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "logs:StartQuery",
                "logs:GetQueryResults",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "BackEndImageHandlerLogGroupA0941EEC",
                  "Arn",
                ],
              },
            },
            {
              "Action": "logs:DescribeQueryDefinitions",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "BackEndSolutionMetricsMetricsLambdaServiceRoleDefaultPolicyEBDDA47A",
        "Roles": [
          {
            "Ref": "BackEndSolutionMetricsMetricsLambdaServiceRoleF4BC77CD",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "BackEndSolutionMetricsMetricsLambdaServiceRoleF4BC77CD": {
      "Condition": "SendAnonymousStatistics",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
        "Tags": [
          {
            "Key": "SolutionId",
            "Value": "S0ABC",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "BackEndSolutionMetricsMetricsLambdaSqsEventSourceTestStackBackEndSolutionMetricsLambdaToSqsToLambdalambdatosqsqueueC02C743365EF89F7": {
      "Condition": "SendAnonymousStatistics",
      "Properties": {
        "EventSourceArn": {
          "Fn::GetAtt": [
            "BackEndSolutionMetricsLambdaToSqsToLambdalambdatosqsqueue60A92083",
            "Arn",
          ],
        },
        "FunctionName": {
          "Ref": "BackEndSolutionMetricsMetricsLambdaF4FA4AF7",
        },
      },
      "Type": "AWS::Lambda::EventSourceMapping",
    },
    "CommonResourcesCustomResourcesCustomResourceAnonymousMetric51363F57": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "AnonymousData": {
          "Fn::FindInMap": [
            "Solution",
            "Config",
            "AnonymousUsage",
          ],
        },
        "AutoWebP": {
          "Ref": "AutoWebPParameter",
        },
        "CorsEnabled": {
          "Ref": "CorsEnabledParameter",
        },
        "CustomAction": "sendMetric",
        "DeployDemoUi": {
          "Ref": "DeployDemoUIParameter",
        },
        "EnableDefaultFallbackImage": {
          "Ref": "EnableDefaultFallbackImageParameter",
        },
        "EnableSignature": {
          "Ref": "EnableSignatureParameter",
        },
        "LogRetentionPeriod": {
          "Ref": "LogRetentionPeriodParameter",
        },
        "Region": {
          "Ref": "AWS::Region",
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CommonResourcesCustomResourcesCustomResourceFunction0D924235",
            "Arn",
          ],
        },
        "SourceBuckets": {
          "Ref": "SourceBucketsParameter",
        },
        "UUID": {
          "Fn::GetAtt": [
            "CommonResourcesCustomResourcesCustomResourceUuid64E7CCAD",
            "UUID",
          ],
        },
      },
      "Type": "AWS::CloudFormation::CustomResource",
      "UpdateReplacePolicy": "Delete",
    },
    "CommonResourcesCustomResourcesCustomResourceCheckFallbackImage6CE45571": {
      "Condition": "CommonResourcesEnableDefaultFallbackImageConditionD1A10983",
      "DeletionPolicy": "Delete",
      "Properties": {
        "CustomAction": "checkFallbackImage",
        "FallbackImageS3Bucket": {
          "Ref": "FallbackImageS3BucketParameter",
        },
        "FallbackImageS3Key": {
          "Ref": "FallbackImageS3KeyParameter",
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CommonResourcesCustomResourcesCustomResourceFunction0D924235",
            "Arn",
          ],
        },
      },
      "Type": "AWS::CloudFormation::CustomResource",
      "UpdateReplacePolicy": "Delete",
    },
    "CommonResourcesCustomResourcesCustomResourceCheckSecretsManagerAEEEC776": {
      "Condition": "CommonResourcesEnableSignatureCondition909DC7A1",
      "DeletionPolicy": "Delete",
      "Properties": {
        "CustomAction": "checkSecretsManager",
        "SecretsManagerKey": {
          "Ref": "SecretsManagerKeyParameter",
        },
        "SecretsManagerName": {
          "Ref": "SecretsManagerSecretParameter",
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CommonResourcesCustomResourcesCustomResourceFunction0D924235",
            "Arn",
          ],
        },
      },
      "Type": "AWS::CloudFormation::CustomResource",
      "UpdateReplacePolicy": "Delete",
    },
    "CommonResourcesCustomResourcesCustomResourceCheckSourceBucketsA313C9B7": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "CustomAction": "checkSourceBuckets",
        "Region": {
          "Ref": "AWS::Region",
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CommonResourcesCustomResourcesCustomResourceFunction0D924235",
            "Arn",
          ],
        },
        "SourceBuckets": {
          "Ref": "SourceBucketsParameter",
        },
      },
      "Type": "AWS::CloudFormation::CustomResource",
      "UpdateReplacePolicy": "Delete",
    },
    "CommonResourcesCustomResourcesCustomResourceFunction0D924235": {
      "DependsOn": [
        "CommonResourcesCustomResourcesCustomResourceRole8958A1ED",
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W58",
              "reason": "The function does have permission to write CloudWatch Logs.",
            },
            {
              "id": "W89",
              "reason": "The Lambda function does not require any VPC connection at all.",
            },
            {
              "id": "W92",
              "reason": "The Lambda function does not require ReservedConcurrentExecutions.",
            },
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "Omitted to remove snapshot dependency on hash",
        },
        "Description": "sih (v6.3.1): Custom resource",
        "Environment": {
          "Variables": {
            "RETRY_SECONDS": "5",
            "SOLUTION_ID": "S0ABC",
            "SOLUTION_VERSION": "Omitted to remove snapshot dependency on solution version",
          },
        },
        "Handler": "index.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "CommonResourcesCustomResourcesCustomResourceRole8958A1ED",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
        "Tags": [
          {
            "Key": "SolutionId",
            "Value": "S0ABC",
          },
        ],
        "Timeout": 60,
      },
      "Type": "AWS::Lambda::Function",
    },
    "CommonResourcesCustomResourcesCustomResourceRole8958A1ED": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W11",
              "reason": "Allow '*' because it is required for making DescribeRegions API call as it doesn't support resource-level permissions and require to choose all resources.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
                {
                  "Action": "s3:ListBucket",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Split": [
                      ",",
                      {
                        "Fn::Sub": [
                          "arn:aws:s3:::\${rest}",
                          {
                            "rest": {
                              "Fn::Join": [
                                ",arn:aws:s3:::",
                                {
                                  "Fn::Split": [
                                    ",",
                                    {
                                      "Fn::Join": [
                                        "",
                                        {
                                          "Fn::Split": [
                                            " ",
                                            {
                                              "Ref": "SourceBucketsParameter",
                                            },
                                          ],
                                        },
                                      ],
                                    },
                                  ],
                                },
                              ],
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  "Action": "s3:GetObject",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:s3:::",
                        {
                          "Ref": "FallbackImageS3BucketParameter",
                        },
                        "/",
                        {
                          "Ref": "FallbackImageS3KeyParameter",
                        },
                      ],
                    ],
                  },
                },
                {
                  "Action": [
                    "s3:putBucketAcl",
                    "s3:putEncryptionConfiguration",
                    "s3:putBucketPolicy",
                    "s3:CreateBucket",
                    "s3:PutBucketOwnershipControls",
                    "s3:PutBucketTagging",
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":s3:::*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "CloudWatchLogsPolicy",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "ec2:DescribeRegions",
                  "Effect": "Allow",
                  "Resource": "*",
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "EC2Policy",
          },
        ],
        "Tags": [
          {
            "Key": "SolutionId",
            "Value": "S0ABC",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CommonResourcesCustomResourcesCustomResourceUuid64E7CCAD": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "CustomAction": "createUuid",
        "Region": {
          "Ref": "AWS::Region",
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CommonResourcesCustomResourcesCustomResourceFunction0D924235",
            "Arn",
          ],
        },
      },
      "Type": "AWS::CloudFormation::CustomResource",
      "UpdateReplacePolicy": "Delete",
    },
    "CommonResourcesCustomResourcesDeployWebsiteAwsCliLayerBC025F39": {
      "Condition": "CommonResourcesDeployDemoUICondition308D3B09",
      "Properties": {
        "Content": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "Omitted to remove snapshot dependency on hash",
        },
        "Description": "/opt/awscli/aws",
      },
      "Type": "AWS::Lambda::LayerVersion",
    },
    "CommonResourcesCustomResourcesDeployWebsiteCustomResourceECB9B136": {
      "Condition": "CommonResourcesDeployDemoUICondition308D3B09",
      "DeletionPolicy": "Delete",
      "Properties": {
        "DestinationBucketName": {
          "Ref": "FrontEndDistributionToS3S3Bucket3A171D78",
        },
        "Exclude": [
          "demo-ui-config.js",
        ],
        "Prune": true,
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C81C01536",
            "Arn",
          ],
        },
        "SourceBucketNames": [
          {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
        ],
        "SourceObjectKeys": [
          "Omitted to remove snapshot dependency on demo ui module hash",
        ],
      },
      "Type": "Custom::CDKBucketDeployment",
      "UpdateReplacePolicy": "Delete",
    },
    "CommonResourcesCustomResourcesLogBucketCustomResource2445A3AB": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "BucketSuffix": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName",
              },
              "-",
              {
                "Ref": "AWS::Region",
              },
              "-",
              {
                "Ref": "AWS::AccountId",
              },
            ],
          ],
        },
        "CustomAction": "createCloudFrontLoggingBucket",
        "ServiceToken": {
          "Fn::GetAtt": [
            "CommonResourcesCustomResourcesCustomResourceFunction0D924235",
            "Arn",
          ],
        },
      },
      "Type": "AWS::CloudFormation::CustomResource",
      "UpdateReplacePolicy": "Delete",
    },
    "CommonResourcesCustomResourcesPutWebsiteConfigC4E435F3": {
      "Condition": "CommonResourcesDeployDemoUICondition308D3B09",
      "DeletionPolicy": "Delete",
      "Properties": {
        "ConfigItem": {
          "apiEndpoint": {
            "Fn::Join": [
              "",
              [
                "https://",
                {
                  "Fn::GetAtt": [
                    "BackEndImageHandlerCloudFrontApiGatewayLambdaCloudFrontToApiGatewayCloudFrontDistribution03AA31B2",
                    "DomainName",
                  ],
                },
              ],
            ],
          },
        },
        "CustomAction": "putConfigFile",
        "DestS3Bucket": {
          "Ref": "FrontEndDistributionToS3S3Bucket3A171D78",
        },
        "DestS3key": "demo-ui-config.js",
        "Region": {
          "Ref": "AWS::Region",
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CommonResourcesCustomResourcesCustomResourceFunction0D924235",
            "Arn",
          ],
        },
      },
      "Type": "AWS::CloudFormation::CustomResource",
      "UpdateReplacePolicy": "Delete",
    },
    "CommonResourcesCustomResourcesWebsiteHostingBucketPolicy3C526944": {
      "Condition": "CommonResourcesDeployDemoUICondition308D3B09",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:GetObject",
                "s3:PutObject",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::GetAtt": [
                        "FrontEndDistributionToS3S3Bucket3A171D78",
                        "Arn",
                      ],
                    },
                    "/*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CommonResourcesCustomResourcesWebsiteHostingBucketPolicy3C526944",
        "Roles": [
          {
            "Ref": "CommonResourcesCustomResourcesCustomResourceRole8958A1ED",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CommonResourcesSecretsManagerPolicy45FE005E": {
      "Condition": "CommonResourcesEnableSignatureCondition909DC7A1",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "secretsmanager:GetSecretValue",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":secretsmanager:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":secret:",
                    {
                      "Ref": "SecretsManagerSecretParameter",
                    },
                    "*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CommonResourcesSecretsManagerPolicy45FE005E",
        "Roles": [
          {
            "Ref": "CommonResourcesCustomResourcesCustomResourceRole8958A1ED",
          },
          {
            "Ref": "BackEndImageHandlerFunctionRoleABF81E5C",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C81C01536": {
      "Condition": "CommonResourcesDeployDemoUICondition308D3B09",
      "DependsOn": [
        "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF",
        "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265",
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W58",
              "reason": "The function does have permission to write CloudWatch Logs.",
            },
            {
              "id": "W89",
              "reason": "The Lambda function does not require any VPC connection at all.",
            },
            {
              "id": "W92",
              "reason": "The Lambda function does not require ReservedConcurrentExecutions.",
            },
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "Omitted to remove snapshot dependency on hash",
        },
        "Environment": {
          "Variables": {
            "AWS_CA_BUNDLE": "/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem",
          },
        },
        "Handler": "index.handler",
        "Layers": [
          {
            "Ref": "CommonResourcesCustomResourcesDeployWebsiteAwsCliLayerBC025F39",
          },
        ],
        "Role": {
          "Fn::GetAtt": [
            "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265",
            "Arn",
          ],
        },
        "Runtime": "python3.9",
        "Tags": [
          {
            "Key": "SolutionId",
            "Value": "S0ABC",
          },
        ],
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265": {
      "Condition": "CommonResourcesDeployDemoUICondition308D3B09",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
        "Tags": [
          {
            "Key": "SolutionId",
            "Value": "S0ABC",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF": {
      "Condition": "CommonResourcesDeployDemoUICondition308D3B09",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      {
                        "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                      },
                    ],
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      {
                        "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "FrontEndDistributionToS3S3Bucket3A171D78",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "FrontEndDistributionToS3S3Bucket3A171D78",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF",
        "Roles": [
          {
            "Ref": "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "DefaultApplicationAttributeGroup41AD7209": {
      "Properties": {
        "Attributes": {
          "applicationType": "AWS-Solutions",
          "solutionID": "S0ABC",
          "solutionName": "sih",
          "version": "v6.3.1",
        },
        "Description": "Attribute group for solution information",
        "Name": {
          "Fn::Join": [
            "",
            [
              "A30-AppRegistry-",
              {
                "Ref": "AWS::StackName",
              },
            ],
          ],
        },
        "Tags": {
          "SolutionId": "S0ABC",
        },
      },
      "Type": "AWS::ServiceCatalogAppRegistry::AttributeGroup",
    },
    "DefaultApplicationAttributeGroupApplicationAttributeGroupAssociation8a890967e42369633265": {
      "Properties": {
        "Application": {
          "Fn::GetAtt": [
            "AppRegistry968496A3",
            "Id",
          ],
        },
        "AttributeGroup": {
          "Fn::GetAtt": [
            "DefaultApplicationAttributeGroup41AD7209",
            "Id",
          ],
        },
      },
      "Type": "AWS::ServiceCatalogAppRegistry::AttributeGroupAssociation",
    },
    "FrontEndDistributionToS3CloudFrontDistribution15FE13D0": {
      "Condition": "CommonResourcesDeployDemoUICondition308D3B09",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W70",
              "reason": "Since the distribution uses the CloudFront domain name, CloudFront automatically sets the security policy to TLSv1 regardless of the value of MinimumProtocolVersion",
            },
          ],
        },
      },
      "Properties": {
        "DistributionConfig": {
          "Comment": "Demo UI Distribution for Serverless Image Handler",
          "CustomErrorResponses": [
            {
              "ErrorCode": 403,
              "ResponseCode": 200,
              "ResponsePagePath": "/index.html",
            },
            {
              "ErrorCode": 404,
              "ResponseCode": 200,
              "ResponsePagePath": "/index.html",
            },
          ],
          "DefaultCacheBehavior": {
            "CachePolicyId": "658327ea-f89d-4fab-a63d-7e88639e58f6",
            "Compress": true,
            "TargetOriginId": "TestStackFrontEndDistributionToS3CloudFrontDistributionOrigin12FCDC222",
            "ViewerProtocolPolicy": "redirect-to-https",
          },
          "DefaultRootObject": "index.html",
          "Enabled": true,
          "HttpVersion": "http2",
          "IPV6Enabled": true,
          "Logging": {
            "Bucket": {
              "Fn::Join": [
                "",
                [
                  {
                    "Fn::GetAtt": [
                      "CommonResourcesCustomResourcesLogBucketCustomResource2445A3AB",
                      "BucketName",
                    ],
                  },
                  ".s3.",
                  {
                    "Fn::GetAtt": [
                      "CommonResourcesCustomResourcesLogBucketCustomResource2445A3AB",
                      "Region",
                    ],
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix",
                  },
                ],
              ],
            },
            "Prefix": "ui-cloudfront/",
          },
          "Origins": [
            {
              "DomainName": {
                "Fn::GetAtt": [
                  "FrontEndDistributionToS3S3Bucket3A171D78",
                  "RegionalDomainName",
                ],
              },
              "Id": "TestStackFrontEndDistributionToS3CloudFrontDistributionOrigin12FCDC222",
              "OriginAccessControlId": {
                "Fn::GetAtt": [
                  "FrontEndDistributionToS3CloudFrontOac2BE9C90D",
                  "Id",
                ],
              },
              "S3OriginConfig": {
                "OriginAccessIdentity": "",
              },
            },
          ],
        },
        "Tags": [
          {
            "Key": "SolutionId",
            "Value": "S0ABC",
          },
        ],
      },
      "Type": "AWS::CloudFront::Distribution",
    },
    "FrontEndDistributionToS3CloudFrontOac2BE9C90D": {
      "Condition": "CommonResourcesDeployDemoUICondition308D3B09",
      "Properties": {
        "OriginAccessControlConfig": {
          "Description": "Origin access control provisioned by aws-cloudfront-s3",
          "Name": {
            "Fn::Join": [
              "",
              [
                "aws-cloudfront-s3-DistnToS3-",
                {
                  "Fn::Select": [
                    2,
                    {
                      "Fn::Split": [
                        "/",
                        {
                          "Ref": "AWS::StackId",
                        },
                      ],
                    },
                  ],
                },
              ],
            ],
          },
          "OriginAccessControlOriginType": "s3",
          "SigningBehavior": "always",
          "SigningProtocol": "sigv4",
        },
      },
      "Type": "AWS::CloudFront::OriginAccessControl",
    },
    "FrontEndDistributionToS3S3Bucket3A171D78": {
      "Condition": "CommonResourcesDeployDemoUICondition308D3B09",
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W35",
              "reason": "This S3 bucket does not require access logging.",
            },
          ],
        },
      },
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "LifecycleConfiguration": {
          "Rules": [
            {
              "NoncurrentVersionTransitions": [
                {
                  "StorageClass": "GLACIER",
                  "TransitionInDays": 90,
                },
              ],
              "Status": "Enabled",
            },
          ],
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "Tags": [
          {
            "Key": "aws-cdk:cr-owned:d2c34063",
            "Value": "true",
          },
          {
            "Key": "SolutionId",
            "Value": "S0ABC",
          },
        ],
        "VersioningConfiguration": {
          "Status": "Enabled",
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "FrontEndDistributionToS3S3BucketPolicyF3A0315A": {
      "Condition": "CommonResourcesDeployDemoUICondition308D3B09",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "F16",
              "reason": "Public website bucket policy requires a wildcard principal",
            },
          ],
        },
      },
      "Properties": {
        "Bucket": {
          "Ref": "FrontEndDistributionToS3S3Bucket3A171D78",
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": {
                "AWS": "*",
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "FrontEndDistributionToS3S3Bucket3A171D78",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "FrontEndDistributionToS3S3Bucket3A171D78",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "s3:GetObject",
              "Condition": {
                "StringEquals": {
                  "AWS:SourceArn": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:cloudfront::",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":distribution/",
                        {
                          "Ref": "FrontEndDistributionToS3CloudFrontDistribution15FE13D0",
                        },
                      ],
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Principal": {
                "Service": "cloudfront.amazonaws.com",
              },
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::GetAtt": [
                        "FrontEndDistributionToS3S3Bucket3A171D78",
                        "Arn",
                      ],
                    },
                    "/*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;
